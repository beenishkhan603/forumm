/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel-plugin for production.
 */
const documents = {
    "\n  fragment EventFull on Event {\n    eventId\n    organizerId\n    isComplete\n    isPublished\n    dateCreated\n    availableTickets {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n    ondemandContent {\n      id\n      title\n      description\n      url\n    }\n    communications {\n      socials {\n        platform\n        url\n      }\n      announcements {\n        title\n        body\n      }\n    }\n    messages {\n      ...MessageFull\n    }\n    event {\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      registrationCloseDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      publiclyListed\n      currency\n      fixedAdminFee\n      eventType\n      eventLocation\n      donationUrl\n      blackbaudId\n      timeZone\n    }\n    registrationFields {\n      name\n    }\n    fundraising {\n      enabled\n      id\n      title\n      description\n      goal\n      programs {\n        title\n        description\n        goal\n        media {\n          title\n          body\n          platform\n          url\n        }\n      }\n      media {\n        title\n        body\n        platform\n        url\n      }\n    }\n    tickets {\n      price\n      ticketType\n      title\n      quantity\n      adminFee\n    }\n    speakers {\n      userId\n      email\n      name\n      organization\n      position\n      profileImage\n      ticketType\n      bio\n    }\n    stages {\n      class\n      description\n      holdingVideoUrl\n      title\n      channelName\n      token\n      grToken\n      isLive\n    }\n    sponsors {\n      title\n      description\n      logoUrl\n      ondemandContent {\n        url\n        title\n        description\n        id\n      }\n      websiteUrl\n      twitterUrl\n      linkedinUrl\n      facebookUrl\n    }\n    sessions {\n      description\n      endDateTime\n      speakers {\n        email\n        name\n        organization\n        position\n        profileImage\n        ticketType\n      }\n      stage {\n        class\n        description\n        holdingVideoUrl\n        title\n      }\n      startDateTime\n      title\n      isBreak\n    }\n    breakoutRooms {\n      thumbnailImage\n      description\n      maxAttendees\n      title\n      channelName\n      token\n      totalUsers\n    }\n    attendees {\n      email\n      name\n      profileImage\n      ticketTitle\n      invitationSentDatetime\n      registered\n      checkInStatus\n      checkInDatetime\n      ticketCode\n      userId\n    }\n  }\n": types.EventFullFragmentDoc,
    "\n  fragment EventOverview on Event {\n    eventId\n    organizerId\n    isPublished\n    isComplete\n    availableTickets {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n    event {\n      eventType\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      donationUrl\n      currency\n    }\n    attendees {\n      name\n    }\n    fundraising {\n      goal\n      donors\n      raised\n    }\n    speakers {\n      email\n    }\n  }\n": types.EventOverviewFragmentDoc,
    "\n  query getEventByDonationUrl($input: GetEventByDonationUrlInput!) {\n    getEventByDonationUrl(input: $input) {\n      ...EventData\n      __typename\n      fundraising {\n        id\n        title\n        description\n        goal\n        programs {\n          title\n          description\n          goal\n          media {\n            title\n            body\n            platform\n            url\n          }\n        }\n        media {\n          title\n          body\n          platform\n          url\n        }\n        transactions {\n          selectedProgram\n          fee\n          total\n          email\n          amount\n          created\n          currency\n          coverFee\n          address\n          giftAid\n          firstName\n          lastName\n          donation\n        }\n      }\n    }\n  }\n\n  fragment EventData on Event {\n    eventId\n    isPublished\n    organizerId\n    event {\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      registrationCloseDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      publiclyListed\n      currency\n      fixedAdminFee\n      eventType\n      eventLocation\n      donationUrl\n    }\n    donations {\n      email\n      fullName\n      amount\n      message\n      created\n      currency\n      avatarUrl\n      selectedProgram\n    }\n  }\n": types.GetEventByDonationUrlDocument,
    "\n  query getEventById($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      ...EventFull\n    }\n  }\n": types.GetEventByIdDocument,
    "\n  query getEventByIdForEditor($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      eventId\n      organizerId\n      isPublished\n      isComplete\n      dateCreated\n      notifyOrganiser\n      availableTickets {\n        tickets {\n          ticketTitle\n          totalQuantity\n          remaining\n        }\n      }\n      event {\n        bannerImage\n        description\n        eventMainColour\n        eventBackgroundColour\n        eventTextColour\n        endDateTime\n        registrationCloseDateTime\n        shortDescription\n        startDateTime\n        title\n        organizationName\n        thumbnailImage\n        publiclyListed\n        currency\n        eventLocation\n        donationUrl\n        eventType\n        blackbaudId\n        timeZone\n      }\n      registrationFields {\n        name\n      }\n      fundraising {\n        enabled\n        id\n        title\n        description\n        goal\n        programs {\n          title\n          description\n          goal\n          media {\n            title\n            body\n            platform\n            url\n          }\n        }\n        media {\n          title\n          body\n          platform\n          url\n        }\n      }\n      tickets {\n        price\n        ticketType\n        title\n        quantity\n      }\n      speakers {\n        userId\n        email\n        name\n        organization\n        position\n        profileImage\n        ticketType\n        bio\n      }\n      stages {\n        class\n        description\n        holdingVideoUrl\n        title\n      }\n      sponsors {\n        description\n        facebookUrl\n        linkedinUrl\n        logoUrl\n        title\n        twitterUrl\n        websiteUrl\n        ondemandContent {\n          url\n          title\n          description\n          id\n        }\n      }\n      sessions {\n        description\n        endDateTime\n        speakers {\n          email\n          name\n          organization\n          position\n          profileImage\n          ticketType\n        }\n        stage {\n          class\n          description\n          holdingVideoUrl\n          title\n        }\n        startDateTime\n        title\n        isBreak\n      }\n      breakoutRooms {\n        thumbnailImage\n        description\n        maxAttendees\n        title\n      }\n      communications {\n        socials {\n          platform\n          url\n        }\n        announcements {\n          title\n          body\n        }\n      }\n      ondemandContent {\n        id\n        url\n        title\n        description\n      }\n      attendees {\n        email\n        name\n        profileImage\n        ticketTitle\n        invitationSentDatetime\n        registered\n        checkInStatus\n        checkInDatetime\n        ticketCode\n        userId\n      }\n    }\n  }\n": types.GetEventByIdForEditorDocument,
    "\n  query getEventByIdForUnregisteredUser(\n    $input: GetEventByIdForUnregisteredUserInput!\n  ) {\n    getEventByIdForUnregisteredUser(input: $input) {\n      ...EventFull\n    }\n  }\n": types.GetEventByIdForUnregisteredUserDocument,
    "\n  query getOrderByEventId($eventId: String!, $userId: String!) {\n    getOrderByEventId(eventId: $eventId, userId: $userId) {\n      userId\n      eventId\n      quantity\n      tickets {\n        title\n        email\n        fullName\n      }\n    }\n  }\n": types.GetOrderByEventIdDocument,
    "\n  subscription ChannelInfoChanged($channelName: String!) {\n    ChannelInfoChanged(channelName: $channelName) {\n      channelName\n      isLive\n      totalUsers\n      users\n    }\n  }\n": types.ChannelInfoChangedDocument,
    "\n  mutation CreateEvent($input: CreateEventInput!) {\n    createEvent(input: $input) {\n      eventId\n    }\n  }\n": types.CreateEventDocument,
    "\n  mutation deleteEventById($input: DeleteEventByIdInput!) {\n    deleteEventById(input: $input)\n  }\n": types.DeleteEventByIdDocument,
    "\n  mutation eventDonationCreatePaymentIntent(\n    $input: DonationPaymentIntentInput!\n  ) {\n    eventDonationCreatePaymentIntent(input: $input) {\n      clientSecret\n      nextAction\n      error\n    }\n  }\n": types.EventDonationCreatePaymentIntentDocument,
    "\n  query eventDonationListTransactions(\n    $eventId: String\n    $donationUrl: String\n    $eventName: String\n  ) {\n    eventDonationListTransactions(\n      eventId: $eventId\n      donationUrl: $donationUrl\n      eventName: $eventName\n    ) {\n      transactions {\n        firstName\n        lastName\n        amount\n        currency\n        eventId\n        eventName\n        message\n        coverFee\n        fee\n        donation\n        total\n        created\n        address\n        giftAid\n        selectedProgram\n        email\n        visibility\n        donorDob\n      }\n    }\n  }\n": types.EventDonationListTransactionsDocument,
    "\n  mutation eventDonationSendStripeMail(\n    $eventId: String!\n    $firstName: String\n    $lastName: String\n    $email: String\n  ) {\n    eventDonationSendStripeMail(\n      eventId: $eventId\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n    ) {\n      success\n    }\n  }\n": types.EventDonationSendStripeMailDocument,
    "\n  query GetAgoraToken($channelName: String!) {\n    getAgoraToken(channelName: $channelName)\n  }\n": types.GetAgoraTokenDocument,
    "\n  query GetAllEventOverviews {\n    getAllPublicEvents {\n      ...EventOverview\n    }\n  }\n": types.GetAllEventOverviewsDocument,
    "\n  query GetAllEvents {\n    getAllEvents {\n      ...EventFull\n    }\n  }\n": types.GetAllEventsDocument,
    "\n  query getAllEventsByCompany($company: String!) {\n    getAllEventsByCompany(company: $company) {\n      eventId\n      organizerId\n      isPublished\n      isComplete\n      availableTickets {\n        tickets {\n          ticketTitle\n          totalQuantity\n          remaining\n          ticketType\n          price\n        }\n      }\n      event {\n        eventType\n        bannerImage\n        description\n        eventMainColour\n        eventBackgroundColour\n        eventTextColour\n        endDateTime\n        shortDescription\n        startDateTime\n        title\n        organizationName\n        thumbnailImage\n        donationUrl\n        currency\n      }\n      attendees {\n        name\n        email\n        profileImage\n        ticketTitle\n        invitationSentDatetime\n        registered\n        checkInStatus\n        checkInDatetime\n        ticketCode\n      }\n      fundraising {\n        title\n        media {\n          url\n        }\n        goal\n        donors\n        raised\n        transactions {\n          firstName\n          lastName\n          amount\n          currency\n          selectedProgram\n          coverFee\n          fee\n          donation\n          total\n          created\n          selectedProgram\n        }\n      }\n      breakoutRooms {\n        title\n        totalUsers\n        thumbnailImage\n        users\n        maxAttendees\n        channelName\n      }\n      speakers {\n        name\n        email\n        profileImage\n        position\n        organization\n        ticketType\n        bio\n      }\n      ondemandContent {\n        id\n        title\n        description\n        url\n      }\n    }\n  }\n": types.GetAllEventsByCompanyDocument,
    "\n  query GetAllFundraisesOverviews {\n    getAllPublicFundraises {\n      ...EventOverview\n    }\n  }\n": types.GetAllFundraisesOverviewsDocument,
    "\n  query getAvailableTicketsByEventId(\n    $input: GetAvailableTicketsByEventIdInput!\n  ) {\n    getAvailableTicketsByEventId(input: $input) {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n  }\n": types.GetAvailableTicketsByEventIdDocument,
    "\n  mutation getBlackBaudEvent($eventId: String!, $blackbaudId: String) {\n    getBlackBaudEvent(eventId: $eventId, blackbaudId: $blackbaudId) {\n      id\n      name\n      description\n      start_date\n      start_time\n      end_date\n      end_time\n      attendees {\n        name\n        email\n      }\n      speakers {\n        name\n        email\n      }\n    }\n  }\n": types.GetBlackBaudEventDocument,
    "\n  query getBreakoutUserCount($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      eventId\n      breakoutRooms {\n        title\n        channelName\n        totalUsers\n        maxAttendees\n      }\n    }\n  }\n": types.GetBreakoutUserCountDocument,
    "\n  query getChannelInfo($channelName: String!) {\n    getChannelInfo(channelName: $channelName) {\n      channelName\n      isLive\n      totalUsers\n      users\n    }\n  }\n": types.GetChannelInfoDocument,
    "\n  query GetEventsByCompanyOverviews($company: String!) {\n    getEventsByCompany(company: $company) {\n      ...EventOverview\n    }\n  }\n": types.GetEventsByCompanyOverviewsDocument,
    "\n  query GetFundraisingCSV($eventId: String!) {\n    getFundraisingCSV(eventId: $eventId)\n  }\n": types.GetFundraisingCsvDocument,
    "\n  query GetMyEventOverviews {\n    getMyEvents {\n      ...EventOverview\n    }\n  }\n": types.GetMyEventOverviewsDocument,
    "\n  query GetMyEvents {\n    getMyEvents {\n      ...EventFull\n    }\n  }\n": types.GetMyEventsDocument,
    "\n  query GetPastEvents {\n    getPastEvents {\n      ...EventOverview\n    }\n  }\n": types.GetPastEventsDocument,
    "\n  query GetPublicEventsByOrganisationUrlOverviews($url: String!) {\n    getPublicEventsByOrganisationUrl(url: $url) {\n      ...EventOverview\n    }\n  }\n": types.GetPublicEventsByOrganisationUrlOverviewsDocument,
    "\n  mutation PurchaseTickets(\n    $input: PurchaseTicketsInput!\n    $donation: DonationInput\n  ) {\n    purchaseTickets(input: $input, donation: $donation) {\n      checkoutUrl\n      user\n      userAlreadyExist\n    }\n  }\n": types.PurchaseTicketsDocument,
    "\n  mutation pushToBlackbaud(\n    $eventId: String!\n    $blackbaudId: String\n    $fields: [String!]!\n    $updatedConstituents: [UpdatedConstituentInput!]\n  ) {\n    pushToBlackbaud(\n      eventId: $eventId\n      blackbaudId: $blackbaudId\n      fields: $fields\n      updatedConstituents: $updatedConstituents\n    ) {\n      success\n      completed\n      error\n      isOrganizer\n      blackBaudAccessToken\n      orgName\n      currentBlackbaudId\n      newBlackbaudId\n      bbServiceInitialized\n      bbPrimaryAccessKey\n      bbUrl\n      eventPreUpdate\n      eventPostUpdate\n      eventUpdated\n      eventId\n    }\n  }\n": types.PushToBlackbaudDocument,
    "\n\tmutation sendAttendeeEmailsForEvent(\n\t  $emails: [String!]!\n\t  $eventId: String!\n\t) {\n\t  sendAttendeeEmailsForEvent(\n\t  emails: $emails\n\t  eventId: $eventId\n\t  )\n\t}\n": types.SendAttendeeEmailsForEventDocument,
    "\n\tmutation setCheckInforAttendee (\n\t  $email: String!\n\t  $eventId: String!\n      $checkInStatus: String!\n\t) {\n\t  setCheckInforAttendee (\n\t    email: $email\n\t    eventId: $eventId\n        checkInStatus: $checkInStatus\n\t  )\n\t}\n": types.SetCheckInforAttendeeDocument,
    "\n  mutation updateChannelInfo($channelName: String!) {\n    updateChannelInfo(channelName: $channelName)\n  }\n": types.UpdateChannelInfoDocument,
    "\n  mutation UpdateEvent($input: UpdateEventInput!) {\n    updateEvent(input: $input) {\n      eventId\n    }\n  }\n": types.UpdateEventDocument,
    "\n  query GetLocation($latitude: Float!, $longitude: Float!) {\n    getLocation(latitude: $latitude, longitude: $longitude)\n  }\n": types.GetLocationDocument,
    "\n  mutation UploadMedia($input: MediaUploadInput!) {\n    uploadMedia(input: $input) {\n      preSignedUrl\n      uploadedFileUrl\n    }\n  }\n": types.UploadMediaDocument,
    "\n  fragment MessageFull on Message {\n    messageId\n    chatId\n    user {\n      ...UserFull\n    }\n    message\n    dateCreated\n    reactions {\n      users {\n        ...UserFull\n      }\n      emoji\n    }\n  }\n": types.MessageFullFragmentDoc,
    "\n  mutation CallUser($userId: String!) {\n    call(userId: $userId)\n  }\n": types.CallUserDocument,
    "\n  mutation CreateMessageForChatId($input: CreateMessageInput!) {\n    createMessageForChatId(input: $input) {\n      ...MessageFull\n    }\n  }\n": types.CreateMessageForChatIdDocument,
    "\n  query GetChats {\n    getChats {\n      chatId\n      lastMessage\n      dateCreated\n      user {\n        ...UserFull\n      }\n    }\n  }\n": types.GetChatsDocument,
    "\n  query GetMeetingForChannelName($channelName: String!) {\n    getMeetingForChannelName(channelName: $channelName)\n  }\n": types.GetMeetingForChannelNameDocument,
    "\n  query GetMessagesForChatId($input: GetMessagesForChatId!) {\n    getMessagesForChatId(input: $input) {\n      ...MessageFull\n    }\n  }\n": types.GetMessagesForChatIdDocument,
    "\n  subscription MessageChanged($input: String!) {\n    messageChanged(chatId: $input) {\n      ...MessageFull\n    }\n  }\n": types.MessageChangedDocument,
    "\n  mutation ReactToMessage(\n    $emoji: String!\n    $messageUserId: String!\n    $chatId: String!\n    $messageId: String!\n  ) {\n    reactToMessage(\n      emoji: $emoji\n      messageUserId: $messageUserId\n      chatId: $chatId\n      messageId: $messageId\n    ) {\n      ...MessageFull\n    }\n  }\n": types.ReactToMessageDocument,
    "\n  subscription ReceivedCall($myUserId: String!) {\n    receivedCall(userId: $myUserId) {\n      from {\n        ...UserFull\n      }\n      to {\n        ...UserFull\n      }\n    }\n  }\n": types.ReceivedCallDocument,
    "\n  mutation connectToBlackBaud(\n    $name: String!\n    $code: String!\n    $codeVerifier: String!\n    $clientId: String!\n    $redirectUri: String!\n  ) {\n    connectToBlackBaud(\n      name: $name\n      code: $code\n      codeVerifier: $codeVerifier\n      clientId: $clientId\n      redirectUri: $redirectUri\n    ) {\n      success\n    }\n  }\n": types.ConnectToBlackBaudDocument,
    "\n  query getOrganisationByName($name: String!) {\n    getOrganisationByName(name: $name) {\n      name\n      organisationType\n      bannerImage\n      logoImage\n      mainColour\n      currency\n      percentage\n      headerTextOne\n      headerTextTwo\n      dashboardPopupDoNotShowAgain\n      blackBaudAccessToken\n      url\n    }\n  }\n": types.GetOrganisationByNameDocument,
    "\n  query GetAllOrganisations {\n    getAllOrganisations {\n      name\n      organisationType\n      bannerImage\n      logoImage\n      mainColour\n      currency\n      percentage\n    }\n  }\n": types.GetAllOrganisationsDocument,
    "\n  mutation updateOrganisation(\n    $name: String!\n    $organisationType: String\n    $mainColour: String\n    $bannerImage: String\n    $logoImage: String\n    $currency: String\n    $percentage: Float\n    $headerTextOne: String\n    $headerTextTwo: String\n    $dashboardPopupDoNotShowAgain: Boolean\n  ) {\n    updateOrganisation(\n      name: $name\n      organisationType: $organisationType\n      mainColour: $mainColour\n      bannerImage: $bannerImage\n      logoImage: $logoImage\n      currency: $currency\n      percentage: $percentage\n      headerTextOne: $headerTextOne\n      headerTextTwo: $headerTextTwo\n      dashboardPopupDoNotShowAgain: $dashboardPopupDoNotShowAgain\n    ) {\n      success\n    }\n  }\n": types.UpdateOrganisationDocument,
    "\n  mutation addStatistic(\n    $anonymousId: String\n    $userId: String\n    $url: String\n    $ip: String\n    $country: String\n    $browser: String\n  ) {\n    addStatistic(\n      anonymousId: $anonymousId\n      userId: $userId\n      url: $url\n      ip: $ip\n      country: $country\n      browser: $browser\n    )\n  }\n": types.AddStatisticDocument,
    "\n  query getAllStatisticsForOrganiser {\n    getAllStatisticsForOrganiser {\n      anonymousId\n      userId\n      name\n      country\n      donation {\n        coverFee\n        giftAid\n        eventId\n        organizationName\n        eventName\n        url\n        currency\n        amount\n        fee\n        donation\n      }\n      url\n      companyId\n      loggedUserId\n      datetime\n    }\n  }\n": types.GetAllStatisticsForOrganiserDocument,
    "\n  query Theme($themeId: String!) {\n    theme(themeId: $themeId) {\n      themeId\n      color\n      logoUrl\n      url\n    }\n  }\n": types.ThemeDocument,
    "\n  query GetUsersByIds($input: GetUsersByIdsInput!) {\n    getUsersByIds(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n      nextToken\n    }\n  }\n": types.GetUsersByIdsDocument,
    "\n  fragment UserFull on User {\n    name\n    profileImage\n    email\n    userId\n    company\n    dateCreated\n    location\n    university\n    registrationFields\n    lastActive\n    isActive\n    isAnonymous\n    phoneNumber\n    jobTitle\n    otherProfiles\n    companyTitle\n  }\n": types.UserFullFragmentDoc,
    "\n  mutation adminResetPassword($ghostedEmail: String!) {\n    adminResetPassword(ghostedEmail: $ghostedEmail) {\n      success\n    }\n  }\n": types.AdminResetPasswordDocument,
    "\n  mutation changePassword($password: String!) {\n    changePassword(password: $password) {\n      success\n    }\n  }\n": types.ChangePasswordDocument,
    "\n  mutation CreateMerchant($input: CreateMerchantInput!) {\n    createMerchant(input: $input) {\n      redirectUrl\n    }\n  }\n": types.CreateMerchantDocument,
    "\n    mutation CreateUser(\n        $university: String!,\n        $email: String!\n        $name: String!\n            ) {\n            createUser(\n            university: $university,\n            email: $email,\n            name: $name\n        )\n    }\n": types.CreateUserDocument,
    "\n  query GetAllUsers {\n    getAllUsers(input: { getAll: true }) {\n      total\n      items {\n        ...UserFull\n      }\n    }\n  }\n": types.GetAllUsersDocument,
    "\n  query GetFullOrganiserByCompany($company: String!) {\n    getOrganiserByCompany(company: $company) {\n      items {\n        ...UserFull\n      }\n      total\n      nextToken\n    }\n  }\n": types.GetFullOrganiserByCompanyDocument,
    "\n  query GetMerchantAccount($input: GetMerchantAccountInput!) {\n    getMerchantAccount(input: $input) {\n      merchantAccountExists\n      chargesEnabled\n      required\n    }\n  }\n": types.GetMerchantAccountDocument,
    "\n  query GetOrganiserByCompany($company: String!) {\n    getOrganiserByCompany(company: $company) {\n      items {\n        email\n      }\n      total\n      nextToken\n    }\n  }\n": types.GetOrganiserByCompanyDocument,
    "\n  query GetUserPermissions($input: GetUserPermissionsInput!) {\n    getUserPermissions(input: $input)\n  }\n": types.GetUserPermissionsDocument,
    "\n  query GetUsersInCompany($company: String!) {\n    getUsersInCompany(company: $company) {\n      total\n      items {\n        ...UserFull\n      }\n    }\n  }\n": types.GetUsersInCompanyDocument,
    "\n  query GetUsersInEvent($input: String!) {\n    getUsersInEvent(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n    }\n  }\n": types.GetUsersInEventDocument,
    "\n  query getUsersInGroup($input: GetUsersInGroupInput!) {\n    getUsersInGroup(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n    }\n  }\n": types.GetUsersInGroupDocument,
    "\n  mutation LinkMerchant($input: LinkMerchantInput!) {\n    linkMerchant(input: $input) {\n      status\n      error\n    }\n  }\n": types.LinkMerchantDocument,
    "\n  query Me {\n    me {\n      ...UserFull\n    }\n  }\n": types.MeDocument,
    "\n  mutation organiserRequestAccess(\n    $firstName: String!\n    $lastName: String!\n    $organisation: String!\n    $email: String!\n    $notes: String\n  ) {\n    organiserRequestAccess(\n      firstName: $firstName\n      lastName: $lastName\n      organisation: $organisation\n      email: $email\n      notes: $notes\n    ) {\n      success\n      password\n    }\n  }\n": types.OrganiserRequestAccessDocument,
    "\n  mutation passwordResetConfirmation($email: String!, $password: String!) {\n    passwordResetConfirmation(email: $email, password: $password) {\n      success\n    }\n  }\n": types.PasswordResetConfirmationDocument,
    "\n  mutation requestEarlyAccess(\n    $email: String!\n    $firstName: String!\n    $lastName: String!\n    $notes: String\n  ) {\n    requestEarlyAccess(\n      email: $email\n      firstName: $firstName\n      lastName: $lastName\n      notes: $notes\n    ) {\n      success\n    }\n  }\n": types.RequestEarlyAccessDocument,
    "\n  mutation AddUserData($input: RegistrationFieldValuesInput!) {\n    addUserData(input: $input)\n  }\n": types.AddUserDataDocument,
    "\n  mutation UpdateLastActive($input: UpdateLastActiveInput!) {\n    updateLastActive(input: $input)\n  }\n": types.UpdateLastActiveDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EventFull on Event {\n    eventId\n    organizerId\n    isComplete\n    isPublished\n    dateCreated\n    availableTickets {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n    ondemandContent {\n      id\n      title\n      description\n      url\n    }\n    communications {\n      socials {\n        platform\n        url\n      }\n      announcements {\n        title\n        body\n      }\n    }\n    messages {\n      ...MessageFull\n    }\n    event {\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      registrationCloseDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      publiclyListed\n      currency\n      fixedAdminFee\n      eventType\n      eventLocation\n      donationUrl\n      blackbaudId\n      timeZone\n    }\n    registrationFields {\n      name\n    }\n    fundraising {\n      enabled\n      id\n      title\n      description\n      goal\n      programs {\n        title\n        description\n        goal\n        media {\n          title\n          body\n          platform\n          url\n        }\n      }\n      media {\n        title\n        body\n        platform\n        url\n      }\n    }\n    tickets {\n      price\n      ticketType\n      title\n      quantity\n      adminFee\n    }\n    speakers {\n      userId\n      email\n      name\n      organization\n      position\n      profileImage\n      ticketType\n      bio\n    }\n    stages {\n      class\n      description\n      holdingVideoUrl\n      title\n      channelName\n      token\n      grToken\n      isLive\n    }\n    sponsors {\n      title\n      description\n      logoUrl\n      ondemandContent {\n        url\n        title\n        description\n        id\n      }\n      websiteUrl\n      twitterUrl\n      linkedinUrl\n      facebookUrl\n    }\n    sessions {\n      description\n      endDateTime\n      speakers {\n        email\n        name\n        organization\n        position\n        profileImage\n        ticketType\n      }\n      stage {\n        class\n        description\n        holdingVideoUrl\n        title\n      }\n      startDateTime\n      title\n      isBreak\n    }\n    breakoutRooms {\n      thumbnailImage\n      description\n      maxAttendees\n      title\n      channelName\n      token\n      totalUsers\n    }\n    attendees {\n      email\n      name\n      profileImage\n      ticketTitle\n      invitationSentDatetime\n      registered\n      checkInStatus\n      checkInDatetime\n      ticketCode\n      userId\n    }\n  }\n"): (typeof documents)["\n  fragment EventFull on Event {\n    eventId\n    organizerId\n    isComplete\n    isPublished\n    dateCreated\n    availableTickets {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n    ondemandContent {\n      id\n      title\n      description\n      url\n    }\n    communications {\n      socials {\n        platform\n        url\n      }\n      announcements {\n        title\n        body\n      }\n    }\n    messages {\n      ...MessageFull\n    }\n    event {\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      registrationCloseDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      publiclyListed\n      currency\n      fixedAdminFee\n      eventType\n      eventLocation\n      donationUrl\n      blackbaudId\n      timeZone\n    }\n    registrationFields {\n      name\n    }\n    fundraising {\n      enabled\n      id\n      title\n      description\n      goal\n      programs {\n        title\n        description\n        goal\n        media {\n          title\n          body\n          platform\n          url\n        }\n      }\n      media {\n        title\n        body\n        platform\n        url\n      }\n    }\n    tickets {\n      price\n      ticketType\n      title\n      quantity\n      adminFee\n    }\n    speakers {\n      userId\n      email\n      name\n      organization\n      position\n      profileImage\n      ticketType\n      bio\n    }\n    stages {\n      class\n      description\n      holdingVideoUrl\n      title\n      channelName\n      token\n      grToken\n      isLive\n    }\n    sponsors {\n      title\n      description\n      logoUrl\n      ondemandContent {\n        url\n        title\n        description\n        id\n      }\n      websiteUrl\n      twitterUrl\n      linkedinUrl\n      facebookUrl\n    }\n    sessions {\n      description\n      endDateTime\n      speakers {\n        email\n        name\n        organization\n        position\n        profileImage\n        ticketType\n      }\n      stage {\n        class\n        description\n        holdingVideoUrl\n        title\n      }\n      startDateTime\n      title\n      isBreak\n    }\n    breakoutRooms {\n      thumbnailImage\n      description\n      maxAttendees\n      title\n      channelName\n      token\n      totalUsers\n    }\n    attendees {\n      email\n      name\n      profileImage\n      ticketTitle\n      invitationSentDatetime\n      registered\n      checkInStatus\n      checkInDatetime\n      ticketCode\n      userId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment EventOverview on Event {\n    eventId\n    organizerId\n    isPublished\n    isComplete\n    availableTickets {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n    event {\n      eventType\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      donationUrl\n      currency\n    }\n    attendees {\n      name\n    }\n    fundraising {\n      goal\n      donors\n      raised\n    }\n    speakers {\n      email\n    }\n  }\n"): (typeof documents)["\n  fragment EventOverview on Event {\n    eventId\n    organizerId\n    isPublished\n    isComplete\n    availableTickets {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n    event {\n      eventType\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      donationUrl\n      currency\n    }\n    attendees {\n      name\n    }\n    fundraising {\n      goal\n      donors\n      raised\n    }\n    speakers {\n      email\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEventByDonationUrl($input: GetEventByDonationUrlInput!) {\n    getEventByDonationUrl(input: $input) {\n      ...EventData\n      __typename\n      fundraising {\n        id\n        title\n        description\n        goal\n        programs {\n          title\n          description\n          goal\n          media {\n            title\n            body\n            platform\n            url\n          }\n        }\n        media {\n          title\n          body\n          platform\n          url\n        }\n        transactions {\n          selectedProgram\n          fee\n          total\n          email\n          amount\n          created\n          currency\n          coverFee\n          address\n          giftAid\n          firstName\n          lastName\n          donation\n        }\n      }\n    }\n  }\n\n  fragment EventData on Event {\n    eventId\n    isPublished\n    organizerId\n    event {\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      registrationCloseDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      publiclyListed\n      currency\n      fixedAdminFee\n      eventType\n      eventLocation\n      donationUrl\n    }\n    donations {\n      email\n      fullName\n      amount\n      message\n      created\n      currency\n      avatarUrl\n      selectedProgram\n    }\n  }\n"): (typeof documents)["\n  query getEventByDonationUrl($input: GetEventByDonationUrlInput!) {\n    getEventByDonationUrl(input: $input) {\n      ...EventData\n      __typename\n      fundraising {\n        id\n        title\n        description\n        goal\n        programs {\n          title\n          description\n          goal\n          media {\n            title\n            body\n            platform\n            url\n          }\n        }\n        media {\n          title\n          body\n          platform\n          url\n        }\n        transactions {\n          selectedProgram\n          fee\n          total\n          email\n          amount\n          created\n          currency\n          coverFee\n          address\n          giftAid\n          firstName\n          lastName\n          donation\n        }\n      }\n    }\n  }\n\n  fragment EventData on Event {\n    eventId\n    isPublished\n    organizerId\n    event {\n      bannerImage\n      description\n      eventMainColour\n      eventBackgroundColour\n      eventTextColour\n      endDateTime\n      registrationCloseDateTime\n      shortDescription\n      startDateTime\n      title\n      organizationName\n      thumbnailImage\n      publiclyListed\n      currency\n      fixedAdminFee\n      eventType\n      eventLocation\n      donationUrl\n    }\n    donations {\n      email\n      fullName\n      amount\n      message\n      created\n      currency\n      avatarUrl\n      selectedProgram\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEventById($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      ...EventFull\n    }\n  }\n"): (typeof documents)["\n  query getEventById($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      ...EventFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEventByIdForEditor($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      eventId\n      organizerId\n      isPublished\n      isComplete\n      dateCreated\n      notifyOrganiser\n      availableTickets {\n        tickets {\n          ticketTitle\n          totalQuantity\n          remaining\n        }\n      }\n      event {\n        bannerImage\n        description\n        eventMainColour\n        eventBackgroundColour\n        eventTextColour\n        endDateTime\n        registrationCloseDateTime\n        shortDescription\n        startDateTime\n        title\n        organizationName\n        thumbnailImage\n        publiclyListed\n        currency\n        eventLocation\n        donationUrl\n        eventType\n        blackbaudId\n        timeZone\n      }\n      registrationFields {\n        name\n      }\n      fundraising {\n        enabled\n        id\n        title\n        description\n        goal\n        programs {\n          title\n          description\n          goal\n          media {\n            title\n            body\n            platform\n            url\n          }\n        }\n        media {\n          title\n          body\n          platform\n          url\n        }\n      }\n      tickets {\n        price\n        ticketType\n        title\n        quantity\n      }\n      speakers {\n        userId\n        email\n        name\n        organization\n        position\n        profileImage\n        ticketType\n        bio\n      }\n      stages {\n        class\n        description\n        holdingVideoUrl\n        title\n      }\n      sponsors {\n        description\n        facebookUrl\n        linkedinUrl\n        logoUrl\n        title\n        twitterUrl\n        websiteUrl\n        ondemandContent {\n          url\n          title\n          description\n          id\n        }\n      }\n      sessions {\n        description\n        endDateTime\n        speakers {\n          email\n          name\n          organization\n          position\n          profileImage\n          ticketType\n        }\n        stage {\n          class\n          description\n          holdingVideoUrl\n          title\n        }\n        startDateTime\n        title\n        isBreak\n      }\n      breakoutRooms {\n        thumbnailImage\n        description\n        maxAttendees\n        title\n      }\n      communications {\n        socials {\n          platform\n          url\n        }\n        announcements {\n          title\n          body\n        }\n      }\n      ondemandContent {\n        id\n        url\n        title\n        description\n      }\n      attendees {\n        email\n        name\n        profileImage\n        ticketTitle\n        invitationSentDatetime\n        registered\n        checkInStatus\n        checkInDatetime\n        ticketCode\n        userId\n      }\n    }\n  }\n"): (typeof documents)["\n  query getEventByIdForEditor($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      eventId\n      organizerId\n      isPublished\n      isComplete\n      dateCreated\n      notifyOrganiser\n      availableTickets {\n        tickets {\n          ticketTitle\n          totalQuantity\n          remaining\n        }\n      }\n      event {\n        bannerImage\n        description\n        eventMainColour\n        eventBackgroundColour\n        eventTextColour\n        endDateTime\n        registrationCloseDateTime\n        shortDescription\n        startDateTime\n        title\n        organizationName\n        thumbnailImage\n        publiclyListed\n        currency\n        eventLocation\n        donationUrl\n        eventType\n        blackbaudId\n        timeZone\n      }\n      registrationFields {\n        name\n      }\n      fundraising {\n        enabled\n        id\n        title\n        description\n        goal\n        programs {\n          title\n          description\n          goal\n          media {\n            title\n            body\n            platform\n            url\n          }\n        }\n        media {\n          title\n          body\n          platform\n          url\n        }\n      }\n      tickets {\n        price\n        ticketType\n        title\n        quantity\n      }\n      speakers {\n        userId\n        email\n        name\n        organization\n        position\n        profileImage\n        ticketType\n        bio\n      }\n      stages {\n        class\n        description\n        holdingVideoUrl\n        title\n      }\n      sponsors {\n        description\n        facebookUrl\n        linkedinUrl\n        logoUrl\n        title\n        twitterUrl\n        websiteUrl\n        ondemandContent {\n          url\n          title\n          description\n          id\n        }\n      }\n      sessions {\n        description\n        endDateTime\n        speakers {\n          email\n          name\n          organization\n          position\n          profileImage\n          ticketType\n        }\n        stage {\n          class\n          description\n          holdingVideoUrl\n          title\n        }\n        startDateTime\n        title\n        isBreak\n      }\n      breakoutRooms {\n        thumbnailImage\n        description\n        maxAttendees\n        title\n      }\n      communications {\n        socials {\n          platform\n          url\n        }\n        announcements {\n          title\n          body\n        }\n      }\n      ondemandContent {\n        id\n        url\n        title\n        description\n      }\n      attendees {\n        email\n        name\n        profileImage\n        ticketTitle\n        invitationSentDatetime\n        registered\n        checkInStatus\n        checkInDatetime\n        ticketCode\n        userId\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getEventByIdForUnregisteredUser(\n    $input: GetEventByIdForUnregisteredUserInput!\n  ) {\n    getEventByIdForUnregisteredUser(input: $input) {\n      ...EventFull\n    }\n  }\n"): (typeof documents)["\n  query getEventByIdForUnregisteredUser(\n    $input: GetEventByIdForUnregisteredUserInput!\n  ) {\n    getEventByIdForUnregisteredUser(input: $input) {\n      ...EventFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getOrderByEventId($eventId: String!, $userId: String!) {\n    getOrderByEventId(eventId: $eventId, userId: $userId) {\n      userId\n      eventId\n      quantity\n      tickets {\n        title\n        email\n        fullName\n      }\n    }\n  }\n"): (typeof documents)["\n  query getOrderByEventId($eventId: String!, $userId: String!) {\n    getOrderByEventId(eventId: $eventId, userId: $userId) {\n      userId\n      eventId\n      quantity\n      tickets {\n        title\n        email\n        fullName\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription ChannelInfoChanged($channelName: String!) {\n    ChannelInfoChanged(channelName: $channelName) {\n      channelName\n      isLive\n      totalUsers\n      users\n    }\n  }\n"): (typeof documents)["\n  subscription ChannelInfoChanged($channelName: String!) {\n    ChannelInfoChanged(channelName: $channelName) {\n      channelName\n      isLive\n      totalUsers\n      users\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateEvent($input: CreateEventInput!) {\n    createEvent(input: $input) {\n      eventId\n    }\n  }\n"): (typeof documents)["\n  mutation CreateEvent($input: CreateEventInput!) {\n    createEvent(input: $input) {\n      eventId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation deleteEventById($input: DeleteEventByIdInput!) {\n    deleteEventById(input: $input)\n  }\n"): (typeof documents)["\n  mutation deleteEventById($input: DeleteEventByIdInput!) {\n    deleteEventById(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation eventDonationCreatePaymentIntent(\n    $input: DonationPaymentIntentInput!\n  ) {\n    eventDonationCreatePaymentIntent(input: $input) {\n      clientSecret\n      nextAction\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation eventDonationCreatePaymentIntent(\n    $input: DonationPaymentIntentInput!\n  ) {\n    eventDonationCreatePaymentIntent(input: $input) {\n      clientSecret\n      nextAction\n      error\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query eventDonationListTransactions(\n    $eventId: String\n    $donationUrl: String\n    $eventName: String\n  ) {\n    eventDonationListTransactions(\n      eventId: $eventId\n      donationUrl: $donationUrl\n      eventName: $eventName\n    ) {\n      transactions {\n        firstName\n        lastName\n        amount\n        currency\n        eventId\n        eventName\n        message\n        coverFee\n        fee\n        donation\n        total\n        created\n        address\n        giftAid\n        selectedProgram\n        email\n        visibility\n        donorDob\n      }\n    }\n  }\n"): (typeof documents)["\n  query eventDonationListTransactions(\n    $eventId: String\n    $donationUrl: String\n    $eventName: String\n  ) {\n    eventDonationListTransactions(\n      eventId: $eventId\n      donationUrl: $donationUrl\n      eventName: $eventName\n    ) {\n      transactions {\n        firstName\n        lastName\n        amount\n        currency\n        eventId\n        eventName\n        message\n        coverFee\n        fee\n        donation\n        total\n        created\n        address\n        giftAid\n        selectedProgram\n        email\n        visibility\n        donorDob\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation eventDonationSendStripeMail(\n    $eventId: String!\n    $firstName: String\n    $lastName: String\n    $email: String\n  ) {\n    eventDonationSendStripeMail(\n      eventId: $eventId\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n    ) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation eventDonationSendStripeMail(\n    $eventId: String!\n    $firstName: String\n    $lastName: String\n    $email: String\n  ) {\n    eventDonationSendStripeMail(\n      eventId: $eventId\n      firstName: $firstName\n      lastName: $lastName\n      email: $email\n    ) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAgoraToken($channelName: String!) {\n    getAgoraToken(channelName: $channelName)\n  }\n"): (typeof documents)["\n  query GetAgoraToken($channelName: String!) {\n    getAgoraToken(channelName: $channelName)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllEventOverviews {\n    getAllPublicEvents {\n      ...EventOverview\n    }\n  }\n"): (typeof documents)["\n  query GetAllEventOverviews {\n    getAllPublicEvents {\n      ...EventOverview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllEvents {\n    getAllEvents {\n      ...EventFull\n    }\n  }\n"): (typeof documents)["\n  query GetAllEvents {\n    getAllEvents {\n      ...EventFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAllEventsByCompany($company: String!) {\n    getAllEventsByCompany(company: $company) {\n      eventId\n      organizerId\n      isPublished\n      isComplete\n      availableTickets {\n        tickets {\n          ticketTitle\n          totalQuantity\n          remaining\n          ticketType\n          price\n        }\n      }\n      event {\n        eventType\n        bannerImage\n        description\n        eventMainColour\n        eventBackgroundColour\n        eventTextColour\n        endDateTime\n        shortDescription\n        startDateTime\n        title\n        organizationName\n        thumbnailImage\n        donationUrl\n        currency\n      }\n      attendees {\n        name\n        email\n        profileImage\n        ticketTitle\n        invitationSentDatetime\n        registered\n        checkInStatus\n        checkInDatetime\n        ticketCode\n      }\n      fundraising {\n        title\n        media {\n          url\n        }\n        goal\n        donors\n        raised\n        transactions {\n          firstName\n          lastName\n          amount\n          currency\n          selectedProgram\n          coverFee\n          fee\n          donation\n          total\n          created\n          selectedProgram\n        }\n      }\n      breakoutRooms {\n        title\n        totalUsers\n        thumbnailImage\n        users\n        maxAttendees\n        channelName\n      }\n      speakers {\n        name\n        email\n        profileImage\n        position\n        organization\n        ticketType\n        bio\n      }\n      ondemandContent {\n        id\n        title\n        description\n        url\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAllEventsByCompany($company: String!) {\n    getAllEventsByCompany(company: $company) {\n      eventId\n      organizerId\n      isPublished\n      isComplete\n      availableTickets {\n        tickets {\n          ticketTitle\n          totalQuantity\n          remaining\n          ticketType\n          price\n        }\n      }\n      event {\n        eventType\n        bannerImage\n        description\n        eventMainColour\n        eventBackgroundColour\n        eventTextColour\n        endDateTime\n        shortDescription\n        startDateTime\n        title\n        organizationName\n        thumbnailImage\n        donationUrl\n        currency\n      }\n      attendees {\n        name\n        email\n        profileImage\n        ticketTitle\n        invitationSentDatetime\n        registered\n        checkInStatus\n        checkInDatetime\n        ticketCode\n      }\n      fundraising {\n        title\n        media {\n          url\n        }\n        goal\n        donors\n        raised\n        transactions {\n          firstName\n          lastName\n          amount\n          currency\n          selectedProgram\n          coverFee\n          fee\n          donation\n          total\n          created\n          selectedProgram\n        }\n      }\n      breakoutRooms {\n        title\n        totalUsers\n        thumbnailImage\n        users\n        maxAttendees\n        channelName\n      }\n      speakers {\n        name\n        email\n        profileImage\n        position\n        organization\n        ticketType\n        bio\n      }\n      ondemandContent {\n        id\n        title\n        description\n        url\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllFundraisesOverviews {\n    getAllPublicFundraises {\n      ...EventOverview\n    }\n  }\n"): (typeof documents)["\n  query GetAllFundraisesOverviews {\n    getAllPublicFundraises {\n      ...EventOverview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAvailableTicketsByEventId(\n    $input: GetAvailableTicketsByEventIdInput!\n  ) {\n    getAvailableTicketsByEventId(input: $input) {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n  }\n"): (typeof documents)["\n  query getAvailableTicketsByEventId(\n    $input: GetAvailableTicketsByEventIdInput!\n  ) {\n    getAvailableTicketsByEventId(input: $input) {\n      tickets {\n        ticketTitle\n        totalQuantity\n        remaining\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation getBlackBaudEvent($eventId: String!, $blackbaudId: String) {\n    getBlackBaudEvent(eventId: $eventId, blackbaudId: $blackbaudId) {\n      id\n      name\n      description\n      start_date\n      start_time\n      end_date\n      end_time\n      attendees {\n        name\n        email\n      }\n      speakers {\n        name\n        email\n      }\n    }\n  }\n"): (typeof documents)["\n  mutation getBlackBaudEvent($eventId: String!, $blackbaudId: String) {\n    getBlackBaudEvent(eventId: $eventId, blackbaudId: $blackbaudId) {\n      id\n      name\n      description\n      start_date\n      start_time\n      end_date\n      end_time\n      attendees {\n        name\n        email\n      }\n      speakers {\n        name\n        email\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getBreakoutUserCount($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      eventId\n      breakoutRooms {\n        title\n        channelName\n        totalUsers\n        maxAttendees\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBreakoutUserCount($input: GetEventByIdInput!) {\n    getEventById(input: $input) {\n      eventId\n      breakoutRooms {\n        title\n        channelName\n        totalUsers\n        maxAttendees\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getChannelInfo($channelName: String!) {\n    getChannelInfo(channelName: $channelName) {\n      channelName\n      isLive\n      totalUsers\n      users\n    }\n  }\n"): (typeof documents)["\n  query getChannelInfo($channelName: String!) {\n    getChannelInfo(channelName: $channelName) {\n      channelName\n      isLive\n      totalUsers\n      users\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetEventsByCompanyOverviews($company: String!) {\n    getEventsByCompany(company: $company) {\n      ...EventOverview\n    }\n  }\n"): (typeof documents)["\n  query GetEventsByCompanyOverviews($company: String!) {\n    getEventsByCompany(company: $company) {\n      ...EventOverview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFundraisingCSV($eventId: String!) {\n    getFundraisingCSV(eventId: $eventId)\n  }\n"): (typeof documents)["\n  query GetFundraisingCSV($eventId: String!) {\n    getFundraisingCSV(eventId: $eventId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMyEventOverviews {\n    getMyEvents {\n      ...EventOverview\n    }\n  }\n"): (typeof documents)["\n  query GetMyEventOverviews {\n    getMyEvents {\n      ...EventOverview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMyEvents {\n    getMyEvents {\n      ...EventFull\n    }\n  }\n"): (typeof documents)["\n  query GetMyEvents {\n    getMyEvents {\n      ...EventFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPastEvents {\n    getPastEvents {\n      ...EventOverview\n    }\n  }\n"): (typeof documents)["\n  query GetPastEvents {\n    getPastEvents {\n      ...EventOverview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetPublicEventsByOrganisationUrlOverviews($url: String!) {\n    getPublicEventsByOrganisationUrl(url: $url) {\n      ...EventOverview\n    }\n  }\n"): (typeof documents)["\n  query GetPublicEventsByOrganisationUrlOverviews($url: String!) {\n    getPublicEventsByOrganisationUrl(url: $url) {\n      ...EventOverview\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation PurchaseTickets(\n    $input: PurchaseTicketsInput!\n    $donation: DonationInput\n  ) {\n    purchaseTickets(input: $input, donation: $donation) {\n      checkoutUrl\n      user\n      userAlreadyExist\n    }\n  }\n"): (typeof documents)["\n  mutation PurchaseTickets(\n    $input: PurchaseTicketsInput!\n    $donation: DonationInput\n  ) {\n    purchaseTickets(input: $input, donation: $donation) {\n      checkoutUrl\n      user\n      userAlreadyExist\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation pushToBlackbaud(\n    $eventId: String!\n    $blackbaudId: String\n    $fields: [String!]!\n    $updatedConstituents: [UpdatedConstituentInput!]\n  ) {\n    pushToBlackbaud(\n      eventId: $eventId\n      blackbaudId: $blackbaudId\n      fields: $fields\n      updatedConstituents: $updatedConstituents\n    ) {\n      success\n      completed\n      error\n      isOrganizer\n      blackBaudAccessToken\n      orgName\n      currentBlackbaudId\n      newBlackbaudId\n      bbServiceInitialized\n      bbPrimaryAccessKey\n      bbUrl\n      eventPreUpdate\n      eventPostUpdate\n      eventUpdated\n      eventId\n    }\n  }\n"): (typeof documents)["\n  mutation pushToBlackbaud(\n    $eventId: String!\n    $blackbaudId: String\n    $fields: [String!]!\n    $updatedConstituents: [UpdatedConstituentInput!]\n  ) {\n    pushToBlackbaud(\n      eventId: $eventId\n      blackbaudId: $blackbaudId\n      fields: $fields\n      updatedConstituents: $updatedConstituents\n    ) {\n      success\n      completed\n      error\n      isOrganizer\n      blackBaudAccessToken\n      orgName\n      currentBlackbaudId\n      newBlackbaudId\n      bbServiceInitialized\n      bbPrimaryAccessKey\n      bbUrl\n      eventPreUpdate\n      eventPostUpdate\n      eventUpdated\n      eventId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation sendAttendeeEmailsForEvent(\n\t  $emails: [String!]!\n\t  $eventId: String!\n\t) {\n\t  sendAttendeeEmailsForEvent(\n\t  emails: $emails\n\t  eventId: $eventId\n\t  )\n\t}\n"): (typeof documents)["\n\tmutation sendAttendeeEmailsForEvent(\n\t  $emails: [String!]!\n\t  $eventId: String!\n\t) {\n\t  sendAttendeeEmailsForEvent(\n\t  emails: $emails\n\t  eventId: $eventId\n\t  )\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n\tmutation setCheckInforAttendee (\n\t  $email: String!\n\t  $eventId: String!\n      $checkInStatus: String!\n\t) {\n\t  setCheckInforAttendee (\n\t    email: $email\n\t    eventId: $eventId\n        checkInStatus: $checkInStatus\n\t  )\n\t}\n"): (typeof documents)["\n\tmutation setCheckInforAttendee (\n\t  $email: String!\n\t  $eventId: String!\n      $checkInStatus: String!\n\t) {\n\t  setCheckInforAttendee (\n\t    email: $email\n\t    eventId: $eventId\n        checkInStatus: $checkInStatus\n\t  )\n\t}\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateChannelInfo($channelName: String!) {\n    updateChannelInfo(channelName: $channelName)\n  }\n"): (typeof documents)["\n  mutation updateChannelInfo($channelName: String!) {\n    updateChannelInfo(channelName: $channelName)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateEvent($input: UpdateEventInput!) {\n    updateEvent(input: $input) {\n      eventId\n    }\n  }\n"): (typeof documents)["\n  mutation UpdateEvent($input: UpdateEventInput!) {\n    updateEvent(input: $input) {\n      eventId\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetLocation($latitude: Float!, $longitude: Float!) {\n    getLocation(latitude: $latitude, longitude: $longitude)\n  }\n"): (typeof documents)["\n  query GetLocation($latitude: Float!, $longitude: Float!) {\n    getLocation(latitude: $latitude, longitude: $longitude)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UploadMedia($input: MediaUploadInput!) {\n    uploadMedia(input: $input) {\n      preSignedUrl\n      uploadedFileUrl\n    }\n  }\n"): (typeof documents)["\n  mutation UploadMedia($input: MediaUploadInput!) {\n    uploadMedia(input: $input) {\n      preSignedUrl\n      uploadedFileUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment MessageFull on Message {\n    messageId\n    chatId\n    user {\n      ...UserFull\n    }\n    message\n    dateCreated\n    reactions {\n      users {\n        ...UserFull\n      }\n      emoji\n    }\n  }\n"): (typeof documents)["\n  fragment MessageFull on Message {\n    messageId\n    chatId\n    user {\n      ...UserFull\n    }\n    message\n    dateCreated\n    reactions {\n      users {\n        ...UserFull\n      }\n      emoji\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CallUser($userId: String!) {\n    call(userId: $userId)\n  }\n"): (typeof documents)["\n  mutation CallUser($userId: String!) {\n    call(userId: $userId)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateMessageForChatId($input: CreateMessageInput!) {\n    createMessageForChatId(input: $input) {\n      ...MessageFull\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMessageForChatId($input: CreateMessageInput!) {\n    createMessageForChatId(input: $input) {\n      ...MessageFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetChats {\n    getChats {\n      chatId\n      lastMessage\n      dateCreated\n      user {\n        ...UserFull\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetChats {\n    getChats {\n      chatId\n      lastMessage\n      dateCreated\n      user {\n        ...UserFull\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMeetingForChannelName($channelName: String!) {\n    getMeetingForChannelName(channelName: $channelName)\n  }\n"): (typeof documents)["\n  query GetMeetingForChannelName($channelName: String!) {\n    getMeetingForChannelName(channelName: $channelName)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMessagesForChatId($input: GetMessagesForChatId!) {\n    getMessagesForChatId(input: $input) {\n      ...MessageFull\n    }\n  }\n"): (typeof documents)["\n  query GetMessagesForChatId($input: GetMessagesForChatId!) {\n    getMessagesForChatId(input: $input) {\n      ...MessageFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription MessageChanged($input: String!) {\n    messageChanged(chatId: $input) {\n      ...MessageFull\n    }\n  }\n"): (typeof documents)["\n  subscription MessageChanged($input: String!) {\n    messageChanged(chatId: $input) {\n      ...MessageFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation ReactToMessage(\n    $emoji: String!\n    $messageUserId: String!\n    $chatId: String!\n    $messageId: String!\n  ) {\n    reactToMessage(\n      emoji: $emoji\n      messageUserId: $messageUserId\n      chatId: $chatId\n      messageId: $messageId\n    ) {\n      ...MessageFull\n    }\n  }\n"): (typeof documents)["\n  mutation ReactToMessage(\n    $emoji: String!\n    $messageUserId: String!\n    $chatId: String!\n    $messageId: String!\n  ) {\n    reactToMessage(\n      emoji: $emoji\n      messageUserId: $messageUserId\n      chatId: $chatId\n      messageId: $messageId\n    ) {\n      ...MessageFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  subscription ReceivedCall($myUserId: String!) {\n    receivedCall(userId: $myUserId) {\n      from {\n        ...UserFull\n      }\n      to {\n        ...UserFull\n      }\n    }\n  }\n"): (typeof documents)["\n  subscription ReceivedCall($myUserId: String!) {\n    receivedCall(userId: $myUserId) {\n      from {\n        ...UserFull\n      }\n      to {\n        ...UserFull\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation connectToBlackBaud(\n    $name: String!\n    $code: String!\n    $codeVerifier: String!\n    $clientId: String!\n    $redirectUri: String!\n  ) {\n    connectToBlackBaud(\n      name: $name\n      code: $code\n      codeVerifier: $codeVerifier\n      clientId: $clientId\n      redirectUri: $redirectUri\n    ) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation connectToBlackBaud(\n    $name: String!\n    $code: String!\n    $codeVerifier: String!\n    $clientId: String!\n    $redirectUri: String!\n  ) {\n    connectToBlackBaud(\n      name: $name\n      code: $code\n      codeVerifier: $codeVerifier\n      clientId: $clientId\n      redirectUri: $redirectUri\n    ) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getOrganisationByName($name: String!) {\n    getOrganisationByName(name: $name) {\n      name\n      organisationType\n      bannerImage\n      logoImage\n      mainColour\n      currency\n      percentage\n      headerTextOne\n      headerTextTwo\n      dashboardPopupDoNotShowAgain\n      blackBaudAccessToken\n      url\n    }\n  }\n"): (typeof documents)["\n  query getOrganisationByName($name: String!) {\n    getOrganisationByName(name: $name) {\n      name\n      organisationType\n      bannerImage\n      logoImage\n      mainColour\n      currency\n      percentage\n      headerTextOne\n      headerTextTwo\n      dashboardPopupDoNotShowAgain\n      blackBaudAccessToken\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllOrganisations {\n    getAllOrganisations {\n      name\n      organisationType\n      bannerImage\n      logoImage\n      mainColour\n      currency\n      percentage\n    }\n  }\n"): (typeof documents)["\n  query GetAllOrganisations {\n    getAllOrganisations {\n      name\n      organisationType\n      bannerImage\n      logoImage\n      mainColour\n      currency\n      percentage\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation updateOrganisation(\n    $name: String!\n    $organisationType: String\n    $mainColour: String\n    $bannerImage: String\n    $logoImage: String\n    $currency: String\n    $percentage: Float\n    $headerTextOne: String\n    $headerTextTwo: String\n    $dashboardPopupDoNotShowAgain: Boolean\n  ) {\n    updateOrganisation(\n      name: $name\n      organisationType: $organisationType\n      mainColour: $mainColour\n      bannerImage: $bannerImage\n      logoImage: $logoImage\n      currency: $currency\n      percentage: $percentage\n      headerTextOne: $headerTextOne\n      headerTextTwo: $headerTextTwo\n      dashboardPopupDoNotShowAgain: $dashboardPopupDoNotShowAgain\n    ) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation updateOrganisation(\n    $name: String!\n    $organisationType: String\n    $mainColour: String\n    $bannerImage: String\n    $logoImage: String\n    $currency: String\n    $percentage: Float\n    $headerTextOne: String\n    $headerTextTwo: String\n    $dashboardPopupDoNotShowAgain: Boolean\n  ) {\n    updateOrganisation(\n      name: $name\n      organisationType: $organisationType\n      mainColour: $mainColour\n      bannerImage: $bannerImage\n      logoImage: $logoImage\n      currency: $currency\n      percentage: $percentage\n      headerTextOne: $headerTextOne\n      headerTextTwo: $headerTextTwo\n      dashboardPopupDoNotShowAgain: $dashboardPopupDoNotShowAgain\n    ) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation addStatistic(\n    $anonymousId: String\n    $userId: String\n    $url: String\n    $ip: String\n    $country: String\n    $browser: String\n  ) {\n    addStatistic(\n      anonymousId: $anonymousId\n      userId: $userId\n      url: $url\n      ip: $ip\n      country: $country\n      browser: $browser\n    )\n  }\n"): (typeof documents)["\n  mutation addStatistic(\n    $anonymousId: String\n    $userId: String\n    $url: String\n    $ip: String\n    $country: String\n    $browser: String\n  ) {\n    addStatistic(\n      anonymousId: $anonymousId\n      userId: $userId\n      url: $url\n      ip: $ip\n      country: $country\n      browser: $browser\n    )\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getAllStatisticsForOrganiser {\n    getAllStatisticsForOrganiser {\n      anonymousId\n      userId\n      name\n      country\n      donation {\n        coverFee\n        giftAid\n        eventId\n        organizationName\n        eventName\n        url\n        currency\n        amount\n        fee\n        donation\n      }\n      url\n      companyId\n      loggedUserId\n      datetime\n    }\n  }\n"): (typeof documents)["\n  query getAllStatisticsForOrganiser {\n    getAllStatisticsForOrganiser {\n      anonymousId\n      userId\n      name\n      country\n      donation {\n        coverFee\n        giftAid\n        eventId\n        organizationName\n        eventName\n        url\n        currency\n        amount\n        fee\n        donation\n      }\n      url\n      companyId\n      loggedUserId\n      datetime\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Theme($themeId: String!) {\n    theme(themeId: $themeId) {\n      themeId\n      color\n      logoUrl\n      url\n    }\n  }\n"): (typeof documents)["\n  query Theme($themeId: String!) {\n    theme(themeId: $themeId) {\n      themeId\n      color\n      logoUrl\n      url\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsersByIds($input: GetUsersByIdsInput!) {\n    getUsersByIds(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n      nextToken\n    }\n  }\n"): (typeof documents)["\n  query GetUsersByIds($input: GetUsersByIdsInput!) {\n    getUsersByIds(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n      nextToken\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment UserFull on User {\n    name\n    profileImage\n    email\n    userId\n    company\n    dateCreated\n    location\n    university\n    registrationFields\n    lastActive\n    isActive\n    isAnonymous\n    phoneNumber\n    jobTitle\n    otherProfiles\n    companyTitle\n  }\n"): (typeof documents)["\n  fragment UserFull on User {\n    name\n    profileImage\n    email\n    userId\n    company\n    dateCreated\n    location\n    university\n    registrationFields\n    lastActive\n    isActive\n    isAnonymous\n    phoneNumber\n    jobTitle\n    otherProfiles\n    companyTitle\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation adminResetPassword($ghostedEmail: String!) {\n    adminResetPassword(ghostedEmail: $ghostedEmail) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation adminResetPassword($ghostedEmail: String!) {\n    adminResetPassword(ghostedEmail: $ghostedEmail) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation changePassword($password: String!) {\n    changePassword(password: $password) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation changePassword($password: String!) {\n    changePassword(password: $password) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation CreateMerchant($input: CreateMerchantInput!) {\n    createMerchant(input: $input) {\n      redirectUrl\n    }\n  }\n"): (typeof documents)["\n  mutation CreateMerchant($input: CreateMerchantInput!) {\n    createMerchant(input: $input) {\n      redirectUrl\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n    mutation CreateUser(\n        $university: String!,\n        $email: String!\n        $name: String!\n            ) {\n            createUser(\n            university: $university,\n            email: $email,\n            name: $name\n        )\n    }\n"): (typeof documents)["\n    mutation CreateUser(\n        $university: String!,\n        $email: String!\n        $name: String!\n            ) {\n            createUser(\n            university: $university,\n            email: $email,\n            name: $name\n        )\n    }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetAllUsers {\n    getAllUsers(input: { getAll: true }) {\n      total\n      items {\n        ...UserFull\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetAllUsers {\n    getAllUsers(input: { getAll: true }) {\n      total\n      items {\n        ...UserFull\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetFullOrganiserByCompany($company: String!) {\n    getOrganiserByCompany(company: $company) {\n      items {\n        ...UserFull\n      }\n      total\n      nextToken\n    }\n  }\n"): (typeof documents)["\n  query GetFullOrganiserByCompany($company: String!) {\n    getOrganiserByCompany(company: $company) {\n      items {\n        ...UserFull\n      }\n      total\n      nextToken\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMerchantAccount($input: GetMerchantAccountInput!) {\n    getMerchantAccount(input: $input) {\n      merchantAccountExists\n      chargesEnabled\n      required\n    }\n  }\n"): (typeof documents)["\n  query GetMerchantAccount($input: GetMerchantAccountInput!) {\n    getMerchantAccount(input: $input) {\n      merchantAccountExists\n      chargesEnabled\n      required\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetOrganiserByCompany($company: String!) {\n    getOrganiserByCompany(company: $company) {\n      items {\n        email\n      }\n      total\n      nextToken\n    }\n  }\n"): (typeof documents)["\n  query GetOrganiserByCompany($company: String!) {\n    getOrganiserByCompany(company: $company) {\n      items {\n        email\n      }\n      total\n      nextToken\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUserPermissions($input: GetUserPermissionsInput!) {\n    getUserPermissions(input: $input)\n  }\n"): (typeof documents)["\n  query GetUserPermissions($input: GetUserPermissionsInput!) {\n    getUserPermissions(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsersInCompany($company: String!) {\n    getUsersInCompany(company: $company) {\n      total\n      items {\n        ...UserFull\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetUsersInCompany($company: String!) {\n    getUsersInCompany(company: $company) {\n      total\n      items {\n        ...UserFull\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetUsersInEvent($input: String!) {\n    getUsersInEvent(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n    }\n  }\n"): (typeof documents)["\n  query GetUsersInEvent($input: String!) {\n    getUsersInEvent(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query getUsersInGroup($input: GetUsersInGroupInput!) {\n    getUsersInGroup(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n    }\n  }\n"): (typeof documents)["\n  query getUsersInGroup($input: GetUsersInGroupInput!) {\n    getUsersInGroup(input: $input) {\n      items {\n        ...UserFull\n      }\n      total\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation LinkMerchant($input: LinkMerchantInput!) {\n    linkMerchant(input: $input) {\n      status\n      error\n    }\n  }\n"): (typeof documents)["\n  mutation LinkMerchant($input: LinkMerchantInput!) {\n    linkMerchant(input: $input) {\n      status\n      error\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Me {\n    me {\n      ...UserFull\n    }\n  }\n"): (typeof documents)["\n  query Me {\n    me {\n      ...UserFull\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation organiserRequestAccess(\n    $firstName: String!\n    $lastName: String!\n    $organisation: String!\n    $email: String!\n    $notes: String\n  ) {\n    organiserRequestAccess(\n      firstName: $firstName\n      lastName: $lastName\n      organisation: $organisation\n      email: $email\n      notes: $notes\n    ) {\n      success\n      password\n    }\n  }\n"): (typeof documents)["\n  mutation organiserRequestAccess(\n    $firstName: String!\n    $lastName: String!\n    $organisation: String!\n    $email: String!\n    $notes: String\n  ) {\n    organiserRequestAccess(\n      firstName: $firstName\n      lastName: $lastName\n      organisation: $organisation\n      email: $email\n      notes: $notes\n    ) {\n      success\n      password\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation passwordResetConfirmation($email: String!, $password: String!) {\n    passwordResetConfirmation(email: $email, password: $password) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation passwordResetConfirmation($email: String!, $password: String!) {\n    passwordResetConfirmation(email: $email, password: $password) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation requestEarlyAccess(\n    $email: String!\n    $firstName: String!\n    $lastName: String!\n    $notes: String\n  ) {\n    requestEarlyAccess(\n      email: $email\n      firstName: $firstName\n      lastName: $lastName\n      notes: $notes\n    ) {\n      success\n    }\n  }\n"): (typeof documents)["\n  mutation requestEarlyAccess(\n    $email: String!\n    $firstName: String!\n    $lastName: String!\n    $notes: String\n  ) {\n    requestEarlyAccess(\n      email: $email\n      firstName: $firstName\n      lastName: $lastName\n      notes: $notes\n    ) {\n      success\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation AddUserData($input: RegistrationFieldValuesInput!) {\n    addUserData(input: $input)\n  }\n"): (typeof documents)["\n  mutation AddUserData($input: RegistrationFieldValuesInput!) {\n    addUserData(input: $input)\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  mutation UpdateLastActive($input: UpdateLastActiveInput!) {\n    updateLastActive(input: $input)\n  }\n"): (typeof documents)["\n  mutation UpdateLastActive($input: UpdateLastActiveInput!) {\n    updateLastActive(input: $input)\n  }\n"];

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
**/
export function graphql(source: string): unknown;

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;